<?php
/**
 * CollectionDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ACSF API
 *
 * This is Acquia Site Factory API described in Swagger format.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CollectionDetails Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CollectionDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CollectionDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'time' => '\DateTime',
        'created' => 'int',
        'owner' => 'string',
        'internal_domain' => 'string',
        'external_domains' => 'int[]',
        'sites' => 'int[]',
        'primary_site' => 'int',
        'groups' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'time' => 'date-time',
        'created' => 'int64',
        'owner' => null,
        'internal_domain' => null,
        'external_domains' => null,
        'sites' => null,
        'primary_site' => 'int64',
        'groups' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'time' => 'time',
        'created' => 'created',
        'owner' => 'owner',
        'internal_domain' => 'internal_domain',
        'external_domains' => 'external_domains',
        'sites' => 'sites',
        'primary_site' => 'primary_site',
        'groups' => 'groups'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'time' => 'setTime',
        'created' => 'setCreated',
        'owner' => 'setOwner',
        'internal_domain' => 'setInternalDomain',
        'external_domains' => 'setExternalDomains',
        'sites' => 'setSites',
        'primary_site' => 'setPrimarySite',
        'groups' => 'setGroups'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'time' => 'getTime',
        'created' => 'getCreated',
        'owner' => 'getOwner',
        'internal_domain' => 'getInternalDomain',
        'external_domains' => 'getExternalDomains',
        'sites' => 'getSites',
        'primary_site' => 'getPrimarySite',
        'groups' => 'getGroups'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['internal_domain'] = isset($data['internal_domain']) ? $data['internal_domain'] : null;
        $this->container['external_domains'] = isset($data['external_domains']) ? $data['external_domains'] : null;
        $this->container['sites'] = isset($data['sites']) ? $data['sites'] : null;
        $this->container['primary_site'] = isset($data['primary_site']) ? $data['primary_site'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets time
     * @return \DateTime
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     * @param \DateTime $time
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets created
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param int $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets owner
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param string $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets internal_domain
     * @return string
     */
    public function getInternalDomain()
    {
        return $this->container['internal_domain'];
    }

    /**
     * Sets internal_domain
     * @param string $internal_domain
     * @return $this
     */
    public function setInternalDomain($internal_domain)
    {
        $this->container['internal_domain'] = $internal_domain;

        return $this;
    }

    /**
     * Gets external_domains
     * @return int[]
     */
    public function getExternalDomains()
    {
        return $this->container['external_domains'];
    }

    /**
     * Sets external_domains
     * @param int[] $external_domains
     * @return $this
     */
    public function setExternalDomains($external_domains)
    {
        $this->container['external_domains'] = $external_domains;

        return $this;
    }

    /**
     * Gets sites
     * @return int[]
     */
    public function getSites()
    {
        return $this->container['sites'];
    }

    /**
     * Sets sites
     * @param int[] $sites
     * @return $this
     */
    public function setSites($sites)
    {
        $this->container['sites'] = $sites;

        return $this;
    }

    /**
     * Gets primary_site
     * @return int
     */
    public function getPrimarySite()
    {
        return $this->container['primary_site'];
    }

    /**
     * Sets primary_site
     * @param int $primary_site
     * @return $this
     */
    public function setPrimarySite($primary_site)
    {
        $this->container['primary_site'] = $primary_site;

        return $this;
    }

    /**
     * Gets groups
     * @return int[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     * @param int[] $groups
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


